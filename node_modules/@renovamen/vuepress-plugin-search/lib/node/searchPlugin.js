"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchPlugin = void 0;
const utils_1 = require("@vuepress/utils");
const chokidar = __importStar(require("chokidar"));
const prepareSearchIndex_1 = require("./prepareSearchIndex");
const searchPlugin = ({ locales = {}, hotKeys = ["s", "/"], maxSuggestions = 10, isSearchable = () => true, getExtraFields = () => [] }, app) => ({
    name: "@renovamen/vuepress-plugin-search",
    clientAppEnhanceFiles: utils_1.path.resolve(__dirname, "../client/clientAppEnhance.js"),
    define: {
        __SEARCH_LOCALES__: locales,
        __SEARCH_HOT_KEYS__: hotKeys,
        __SEARCH_MAX_SUGGESTIONS__: maxSuggestions
    },
    onPrepared: (app) => (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields }),
    onWatched: (app, watchers) => {
        // here we only watch the page data files
        // if the extra fields generated by `getExtraFields` are not included
        // in the page data, the changes may not be watched
        const searchIndexWatcher = chokidar.watch("internal/pageData/*", {
            cwd: app.dir.temp(),
            ignoreInitial: true
        });
        searchIndexWatcher.on("add", () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        searchIndexWatcher.on("change", () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        searchIndexWatcher.on("unlink", () => {
            (0, prepareSearchIndex_1.prepareSearchIndex)({ app, isSearchable, getExtraFields });
        });
        watchers.push(searchIndexWatcher);
    }
});
exports.searchPlugin = searchPlugin;
