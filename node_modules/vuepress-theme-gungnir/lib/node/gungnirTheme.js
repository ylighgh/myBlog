"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gungnirTheme = void 0;
const core_1 = require("@vuepress/core");
const utils_1 = require("@vuepress/utils");
const utils_2 = require("./utils");
const gungnirTheme = ({ themePlugins = {}, ...localeOptions }, app) => {
    if (app.options.bundler.endsWith("vite")) {
        // eslint-disable-next-line import/no-extraneous-dependencies
        app.options.bundlerConfig.viteOptions = require("vite").mergeConfig(app.options.bundlerConfig.viteOptions, {
            css: {
                preprocessorOptions: {
                    scss: { charset: false }
                }
            },
            optimizeDeps: {
                exclude: ["oh-vue-icons/icons"]
            }
        });
    }
    (0, utils_2.assignDefaultLocaleOptions)(localeOptions);
    localeOptions.search = !(themePlugins.search === false);
    return {
        name: "vuepress-theme-gungnir",
        layouts: utils_1.path.resolve(__dirname, "../client/layouts"),
        templateBuild: utils_1.path.resolve(__dirname, "../../templates/index.build.html"),
        // use alias to make all components replaceable
        alias: Object.fromEntries(utils_1.fs
            .readdirSync(utils_1.path.resolve(__dirname, "../client/components"))
            .filter((file) => file.endsWith(".vue"))
            .map((file) => [
            `@theme/${file}`,
            utils_1.path.resolve(__dirname, "../client/components", file)
        ])),
        clientAppEnhanceFiles: utils_1.path.resolve(__dirname, "../client/clientAppEnhance.js"),
        clientAppSetupFiles: utils_1.path.resolve(__dirname, "../client/clientAppSetup.js"),
        extendsPage: (page) => {
            // save relative file path into page data to generate edit link
            page.data.filePathRelative = page.filePathRelative;
            // save title into route meta to generate navbar and sidebar
            page.routeMeta.title = page.title;
        },
        plugins: [
            [
                "@vuepress/active-header-links",
                (0, utils_2.resolveActiveHeaderLinksPluginOptions)(themePlugins)
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptions)(themePlugins, localeOptions, "info")
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptions)(themePlugins, localeOptions, "tip")
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptions)(themePlugins, localeOptions, "warning")
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptions)(themePlugins, localeOptions, "danger")
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptionsForDetails)(themePlugins)
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptionsForCodeGroup)(themePlugins)
            ],
            [
                "@vuepress/container",
                (0, utils_2.resolveContainerPluginOptionsForCodeGroupItem)(themePlugins)
            ],
            ["@vuepress/git", (0, utils_2.resolveGitPluginOptions)(themePlugins, localeOptions)],
            ["@vuepress/medium-zoom", (0, utils_2.resolveMediumZoomPluginOptions)(themePlugins)],
            ["@vuepress/nprogress", themePlugins.nprogress !== false],
            ["@vuepress/palette", { preset: "sass" }],
            ["@vuepress/prismjs", themePlugins.prismjs !== false],
            ["@vuepress/theme-data", { themeData: localeOptions }],
            ["@renovamen/vuepress-plugin-search", themePlugins.search],
            ["@renovamen/vuepress-plugin-katex", themePlugins.katex === true],
            [
                "@renovamen/vuepress-plugin-mermaid",
                (0, utils_2.resolveMermaidOptions)(themePlugins)
            ],
            ["vuepress-plugin-chart", themePlugins.chartjs === true],
            ["@renovamen/vuepress-plugin-reading-time", themePlugins.readingTime],
            ["vuepress-plugin-code-enhance", themePlugins.codeEnhance],
            ["@renovamen/vuepress-plugin-rss", (0, utils_2.resolveRSSPluginOptions)(themePlugins)],
            [
                "vuepress-plugin-giscus",
                (0, utils_2.resolveGiscusOptions)(themePlugins, localeOptions)
            ],
            [
                "@vuepress/plugin-google-analytics",
                typeof themePlugins.ga === "string" ? { id: themePlugins.ga } : false
            ],
            [
                "@renovamen/vuepress-plugin-baidu-tongji",
                typeof themePlugins.ba === "string" ? { id: themePlugins.ba } : false
            ],
            [
                "@renovamen/vuepress-plugin-md-plus",
                themePlugins.mdPlus ? themePlugins.mdPlus : false
            ],
            ["@vuepress/plugin-pwa", themePlugins.pwa ? themePlugins.pwa : false],
            [
                "@vuepress/plugin-pwa-popup",
                (0, utils_2.resolvePWAPopupOptions)(themePlugins, localeOptions)
            ]
        ],
        async onInitialized(app) {
            const homepage = await (0, core_1.createPage)(app, {
                path: "/",
                frontmatter: {
                    title: "Home",
                    layout: "HomePage"
                }
            });
            app.pages.push(homepage);
            const tags = await (0, core_1.createPage)(app, {
                path: "/tags",
                frontmatter: {
                    title: "Tags",
                    layout: "Tags"
                }
            });
            app.pages.push(tags);
            /**
             * Create page for each tag manully to avoid the issues caused by
             * dynamic routes, see https://github.com/Renovamen/vuepress-theme-gungnir/issues/28.
             */
            const addedTags = {};
            let postNum = 0;
            for (const page of app.pages) {
                if (page.frontmatter.layout !== "Post")
                    continue;
                for (const tag of page.frontmatter.tags) {
                    if (addedTags[tag] === true)
                        continue;
                    const tagPage = await (0, core_1.createPage)(app, {
                        path: `/tags/${tag}`,
                        frontmatter: {
                            title: "Tags",
                            layout: "Tags"
                        }
                    });
                    app.pages.push(tagPage);
                    addedTags[tag] = true;
                }
                postNum++;
            }
            /**
             * Create page for pagination manully to avoid the issues caused by
             * dynamic routes.
             */
            const maxPageIndex = Math.max(1, Math.ceil(postNum / localeOptions.postNumPerPage));
            for (let i = 1; i <= maxPageIndex; i++) {
                const pagination = await (0, core_1.createPage)(app, {
                    path: `/page/${i}`,
                    frontmatter: {
                        title: "Home",
                        layout: "HomePage"
                    }
                });
                app.pages.push(pagination);
            }
        }
    };
};
exports.gungnirTheme = gungnirTheme;
