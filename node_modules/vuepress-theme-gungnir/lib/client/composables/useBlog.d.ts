import type { PageData } from "@vuepress/client";
import type { Ref } from "vue";
export declare function fetchPosts(): Promise<PageData[]>;
export declare const useBlog: (pageIndex?: Ref<number> | undefined) => {
    posts: Ref<{
        next?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        prev?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        key: string;
        path: string;
        title: string;
        lang: string;
        frontmatter: {
            [x: string]: unknown;
            date?: string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            } | undefined;
            description?: string | undefined;
            head?: ([import("@vuepress/shared").HeadTagEmpty, {
                [x: string]: string | boolean;
            }] | [import("@vuepress/shared").HeadTagNonEmpty, {
                [x: string]: string | boolean;
            }, string])[] | undefined;
            lang?: string | undefined;
            layout?: string | undefined;
            permalink?: string | undefined;
            permalinkPattern?: string | undefined;
            routeMeta?: {
                [x: string]: unknown;
            } | undefined;
            title?: string | undefined;
        };
        excerpt: string;
        headers: {
            level: number;
            title: string;
            slug: string;
            children: any[];
        }[];
    }[]>;
    postIndex: import("vue").ComputedRef<number>;
    post: import("vue").ComputedRef<{
        next?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        prev?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        key: string;
        path: string;
        title: string;
        lang: string;
        frontmatter: {
            [x: string]: unknown;
            date?: string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            } | undefined;
            description?: string | undefined;
            head?: ([import("@vuepress/shared").HeadTagEmpty, {
                [x: string]: string | boolean;
            }] | [import("@vuepress/shared").HeadTagNonEmpty, {
                [x: string]: string | boolean;
            }, string])[] | undefined;
            lang?: string | undefined;
            layout?: string | undefined;
            permalink?: string | undefined;
            permalinkPattern?: string | undefined;
            routeMeta?: {
                [x: string]: unknown;
            } | undefined;
            title?: string | undefined;
        };
        excerpt: string;
        headers: {
            level: number;
            title: string;
            slug: string;
            children: any[];
        }[];
    } | null>;
    slicedPosts: import("vue").ComputedRef<{
        next?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        prev?: {
            title?: string | undefined;
            link?: string | undefined;
            text?: string | undefined;
        } | null | undefined;
        key: string;
        path: string;
        title: string;
        lang: string;
        frontmatter: {
            [x: string]: unknown;
            date?: string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            } | undefined;
            description?: string | undefined;
            head?: ([import("@vuepress/shared").HeadTagEmpty, {
                [x: string]: string | boolean;
            }] | [import("@vuepress/shared").HeadTagNonEmpty, {
                [x: string]: string | boolean;
            }, string])[] | undefined;
            lang?: string | undefined;
            layout?: string | undefined;
            permalink?: string | undefined;
            permalinkPattern?: string | undefined;
            routeMeta?: {
                [x: string]: unknown;
            } | undefined;
            title?: string | undefined;
        };
        excerpt: string;
        headers: {
            level: number;
            title: string;
            slug: string;
            children: any[];
        }[];
    }[]>;
    pagerLink: import("vue").ComputedRef<{
        next?: undefined;
        prev?: undefined;
    } | {
        next: string | null;
        prev: string | null;
    }>;
};
//# sourceMappingURL=useBlog.d.ts.map